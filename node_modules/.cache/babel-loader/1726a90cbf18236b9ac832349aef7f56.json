{"ast":null,"code":"import React from'react';import{evaluate}from'mathjs';var CalculatorDisplay=function CalculatorDisplay(_ref){var value=_ref.value,maxPrecision=_ref.maxPrecision;var pointAt=\"\".concat(value).indexOf('.');var decimalValue=value.substring(pointAt,evaluate(value.length));var precisionWithFraction=pointAt===-1?0:evaluate(decimalValue.length-1);var formattedValue=parseFloat(value).toLocaleString(undefined,{minimumFractionDigits:precisionWithFraction});var scientificNotation=parseFloat(value).toExponential(maxPrecision-4);var maxCharsAtFullSize=6;var scaleFactor='scale(0.36)';var scaleDown=\"\".concat(formattedValue).length>maxCharsAtFullSize?scaleFactor:'scale(1)';if(formattedValue==='NaN'){formattedValue='Error';return;}if(formattedValue.length>15){formattedValue=scientificNotation;}if(scientificNotation.substring(scientificNotation.length-3,scientificNotation.length)==='e+0'){// if exponent part is not needed\nscientificNotation=parseFloat(value).toExponential(maxPrecision-1);scientificNotation=scientificNotation.substring(0,scientificNotation.length-3);}return/*#__PURE__*/React.createElement(\"div\",{className:\"calculator-display\"},/*#__PURE__*/React.createElement(\"div\",{className:\"auto-scaling-text\",style:{transform:scaleDown}},formattedValue));};export default CalculatorDisplay;","map":{"version":3,"sources":["/home/costanza/Projects/copy-calc/react-calculator/src/components/Display.js"],"names":["React","evaluate","CalculatorDisplay","value","maxPrecision","pointAt","indexOf","decimalValue","substring","length","precisionWithFraction","formattedValue","parseFloat","toLocaleString","undefined","minimumFractionDigits","scientificNotation","toExponential","maxCharsAtFullSize","scaleFactor","scaleDown","transform"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,QAAT,KAAyB,QAAzB,CAEA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,MAA6B,IAA1BC,CAAAA,KAA0B,MAA1BA,KAA0B,CAAnBC,YAAmB,MAAnBA,YAAmB,CACnD,GAAMC,CAAAA,OAAO,CAAG,UAAGF,KAAH,EAAWG,OAAX,CAAmB,GAAnB,CAAhB,CACA,GAAMC,CAAAA,YAAY,CAAGJ,KAAK,CAACK,SAAN,CAAgBH,OAAhB,CAAyBJ,QAAQ,CAACE,KAAK,CAACM,MAAP,CAAjC,CAArB,CACA,GAAMC,CAAAA,qBAAqB,CAAIL,OAAO,GAAK,CAAC,CAAd,CAAmB,CAAnB,CAAuBJ,QAAQ,CAACM,YAAY,CAACE,MAAb,CAAsB,CAAvB,CAA7D,CAEA,GAAIE,CAAAA,cAAc,CAAGC,UAAU,CAACT,KAAD,CAAV,CAAkBU,cAAlB,CAAiCC,SAAjC,CAA4C,CAAEC,qBAAqB,CAAEL,qBAAzB,CAA5C,CAArB,CACA,GAAIM,CAAAA,kBAAkB,CAAGJ,UAAU,CAACT,KAAD,CAAV,CAAkBc,aAAlB,CAAgCb,YAAY,CAAG,CAA/C,CAAzB,CAEA,GAAMc,CAAAA,kBAAkB,CAAG,CAA3B,CACA,GAAMC,CAAAA,WAAW,CAAG,aAApB,CACA,GAAMC,CAAAA,SAAS,CAAI,UAAGT,cAAH,EAAoBF,MAArB,CAA+BS,kBAA/B,CAAoDC,WAApD,CAAkE,UAApF,CAEA,GAAIR,cAAc,GAAK,KAAvB,CAA8B,CAC1BA,cAAc,CAAG,OAAjB,CACA,OACH,CAED,GAAIA,cAAc,CAACF,MAAf,CAAwB,EAA5B,CAAgC,CAC5BE,cAAc,CAAGK,kBAAjB,CACH,CAED,GAAIA,kBAAkB,CAACR,SAAnB,CAA6BQ,kBAAkB,CAACP,MAAnB,CAA4B,CAAzD,CAA4DO,kBAAkB,CAACP,MAA/E,IAA2F,KAA/F,CAAsG,CAAE;AACpGO,kBAAkB,CAAGJ,UAAU,CAACT,KAAD,CAAV,CAAkBc,aAAlB,CAAgCb,YAAY,CAAG,CAA/C,CAArB,CACAY,kBAAkB,CAAGA,kBAAkB,CAACR,SAAnB,CAA6B,CAA7B,CAAgCQ,kBAAkB,CAACP,MAAnB,CAA4B,CAA5D,CAArB,CACH,CAED,mBACI,2BAAK,SAAS,CAAC,oBAAf,eACI,2BAAK,SAAS,CAAC,mBAAf,CAAmC,KAAK,CAAE,CAAEY,SAAS,CAAED,SAAb,CAA1C,EACKT,cADL,CADJ,CADJ,CAOH,CAjCD,CAmCA,cAAeT,CAAAA,iBAAf","sourcesContent":["import React from 'react';\nimport { evaluate } from 'mathjs';\n\nconst CalculatorDisplay = ({ value, maxPrecision }) => {\n    const pointAt = `${value}`.indexOf('.');\n    const decimalValue = value.substring(pointAt, evaluate(value.length));\n    const precisionWithFraction = (pointAt === -1) ? 0 : evaluate(decimalValue.length - 1);\n\n    let formattedValue = parseFloat(value).toLocaleString(undefined, { minimumFractionDigits: precisionWithFraction });\n    let scientificNotation = parseFloat(value).toExponential(maxPrecision - 4);\n\n    const maxCharsAtFullSize = 6;\n    const scaleFactor = 'scale(0.36)';\n    const scaleDown = (`${formattedValue}`.length) > maxCharsAtFullSize ? scaleFactor : 'scale(1)';\n\n    if (formattedValue === 'NaN') {\n        formattedValue = 'Error';\n        return;\n    }\n\n    if (formattedValue.length > 15) {\n        formattedValue = scientificNotation;\n    }\n\n    if (scientificNotation.substring(scientificNotation.length - 3, scientificNotation.length) === 'e+0') { // if exponent part is not needed\n        scientificNotation = parseFloat(value).toExponential(maxPrecision - 1);\n        scientificNotation = scientificNotation.substring(0, scientificNotation.length - 3);\n    }\n\n    return (\n        <div className=\"calculator-display\">\n            <div className=\"auto-scaling-text\" style={{ transform: scaleDown }}>\n                {formattedValue}\n            </div>\n        </div>\n    );\n}\n\nexport default CalculatorDisplay;"]},"metadata":{},"sourceType":"module"}