{"ast":null,"code":"import React from'react';var About=function About(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h1\",null,\"About\"),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h3\",null,\"\\uD83D\\uDD28 Built Using: \\uD83D\\uDD28\"),/*#__PURE__*/React.createElement(\"ul\",{style:{textAlign:'left'}},/*#__PURE__*/React.createElement(\"li\",{className:\"li-space\"},/*#__PURE__*/React.createElement(\"strong\",null,\"React\"),\" with \",/*#__PURE__*/React.createElement(\"strong\",null,\"Hooks\"),\" for \",/*#__PURE__*/React.createElement(\"strong\",null,\"state management\"),\" and \",/*#__PURE__*/React.createElement(\"strong\",null,\"dynamic user interface.\")),/*#__PURE__*/React.createElement(\"li\",{className:\"li-space\"},/*#__PURE__*/React.createElement(\"strong\",null,\"React Router\"),\" for painless \",/*#__PURE__*/React.createElement(\"strong\",null,\"client-side routing\"),\".\"),/*#__PURE__*/React.createElement(\"li\",{className:\"li-space\"},/*#__PURE__*/React.createElement(\"strong\",null,\"Math.js\"),\" to \",/*#__PURE__*/React.createElement(\"strong\",null,\"evaluate expressions\"),\" instead of the \",/*#__PURE__*/React.createElement(\"strong\",{style:{color:'red'}},\"dangerous\"),\" \",/*#__PURE__*/React.createElement(\"code\",null,\"eval()\"),\" in JavaScript.\")),/*#__PURE__*/React.createElement(\"h3\",null,\"\\uD83D\\uDCBB Code Summary: \\uD83D\\uDCBB\"),/*#__PURE__*/React.createElement(\"p\",{style:{textAlign:'left',marginLeft:'50px',marginRight:'50px',lineHeight:'20px'}},\"On each click event \",/*#__PURE__*/React.createElement(\"code\",null,\"handleClick(e)\"),\" will pass the value of the button clicked to \",/*#__PURE__*/React.createElement(\"code\",null,\"handleNewKey(newKeyValue)\"),\" to handle the value. There is a function to handle digits (0-9) \",/*#__PURE__*/React.createElement(\"code\",null,\"handleDigit(newKeyValue)\"),\", operators (+, -, *, /, and =) \",/*#__PURE__*/React.createElement(\"code\",null,\"handleOperator(newKeyValue)\"),\", and the other buttons on the calculator. If the string is a valid expression then \",/*#__PURE__*/React.createElement(\"code\",null,\"Display.js\"),\" will format accordingly.\")));};export default About;","map":{"version":3,"sources":["/home/costanza/Projects/copy-calc/react-calculator/src/components/About.js"],"names":["React","About","textAlign","color","marginLeft","marginRight","lineHeight"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,EAAM,CAChB,mBACI,4CACI,sCADJ,cAII,4CACI,uEADJ,cAEI,0BAAI,KAAK,CAAE,CAAEC,SAAS,CAAE,MAAb,CAAX,eACI,0BAAI,SAAS,CAAC,UAAd,eACI,0CADJ,uBACgC,0CADhC,sBAC2D,qDAD3D,sBACiG,4DADjG,CADJ,cAII,0BAAI,SAAS,CAAC,UAAd,eACI,iDADJ,+BAC+C,wDAD/C,KAJJ,cAOI,0BAAI,SAAS,CAAC,UAAd,eACI,4CADJ,qBACgC,yDADhC,iCACqF,8BAAQ,KAAK,CAAE,CAAEC,KAAK,CAAE,KAAT,CAAf,cADrF,kBACyI,yCADzI,mBAPJ,CAFJ,cAaI,wEAbJ,cAcI,yBAAG,KAAK,CAAE,CAAED,SAAS,CAAE,MAAb,CAAqBE,UAAU,CAAE,MAAjC,CAAyCC,WAAW,CAAE,MAAtD,CAA8DC,UAAU,CAAE,MAA1E,CAAV,sCACwB,iDADxB,+DACiG,4DADjG,kFAE+C,2DAF/C,iDAEoH,8DAFpH,qGAG6C,6CAH7C,6BAdJ,CAJJ,CADJ,CA2BH,CA5BD,CA8BA,cAAeL,CAAAA,KAAf","sourcesContent":["import React from 'react';\n\nconst About = () => {\n    return (\n        <div>\n            <h1>\n                About\n            </h1>\n            <div>\n                <h3>ðŸ”¨ Built Using: ðŸ”¨</h3>\n                <ul style={{ textAlign: 'left', }}>\n                    <li className=\"li-space\">\n                        <strong>React</strong> with <strong>Hooks</strong> for <strong>state management</strong> and <strong>dynamic user interface.</strong>\n                    </li>\n                    <li className=\"li-space\">\n                        <strong>React Router</strong> for painless <strong>client-side routing</strong>.\n                    </li>\n                    <li className=\"li-space\">\n                        <strong>Math.js</strong> to <strong>evaluate expressions</strong> instead of the <strong style={{ color: 'red' }}>dangerous</strong> <code>eval()</code> in JavaScript.\n                    </li>\n                </ul>\n                <h3>ðŸ’» Code Summary: ðŸ’»</h3>\n                <p style={{ textAlign: 'left', marginLeft: '50px', marginRight: '50px', lineHeight: '20px' }}>\n                    On each click event <code>handleClick(e)</code> will pass the value of the button clicked to <code>handleNewKey(newKeyValue)</code> to handle the value.\n                    There is a function to handle digits (0-9) <code>handleDigit(newKeyValue)</code>, operators (+, -, *, /, and =) <code>handleOperator(newKeyValue)</code>, and the other buttons on the calculator. \n                    If the string is a valid expression then <code>Display.js</code> will format accordingly.\n                </p>\n            </div>\n        </div>\n    )\n};\n\nexport default About;"]},"metadata":{},"sourceType":"module"}