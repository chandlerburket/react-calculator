{"ast":null,"code":"var _jsxFileName = \"/home/chandler/Projects/javascript/react/react-calculator/src/components/Display.js\";\nimport React from 'react';\nimport { evaluate } from 'mathjs';\n\nconst CalculatorDisplay = ({\n  value,\n  maxPrecision\n}) => {\n  const pointAt = `${value}`.indexOf('.');\n  const decimalValue = value.substring(pointAt, evaluate(value.length));\n  const precisionWithFraction = pointAt === -1 ? 0 : evaluate(decimalValue.length - 1);\n  let formattedValue = parseFloat(value).toLocaleString(undefined, {\n    minimumFractionDigits: precisionWithFraction\n  });\n  let scientificNotation = parseFloat(value).toExponential(maxPrecision - 4);\n  const maxCharsAtFullSize = 6;\n  const scaleFactor = 'scale(0.36)';\n  const scaleDown = `${formattedValue}`.length > maxCharsAtFullSize ? scaleFactor : 'scale(1)';\n\n  if (formattedValue === 'NaN') {\n    formattedValue = 'Error';\n    return;\n  }\n\n  if (formattedValue.length > 15) {\n    formattedValue = scientificNotation;\n  }\n\n  if (scientificNotation.substring(scientificNotation.length - 3, scientificNotation.length) === 'e+0') {\n    // if exponent part is not needed\n    scientificNotation = parseFloat(value).toExponential(maxPrecision - 1);\n    scientificNotation = scientificNotation.substring(0, scientificNotation.length - 3);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calculator-display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"auto-scaling-text\",\n    style: {\n      transform: scaleDown\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, formattedValue));\n};\n\nexport default CalculatorDisplay;","map":{"version":3,"sources":["/home/chandler/Projects/javascript/react/react-calculator/src/components/Display.js"],"names":["React","evaluate","CalculatorDisplay","value","maxPrecision","pointAt","indexOf","decimalValue","substring","length","precisionWithFraction","formattedValue","parseFloat","toLocaleString","undefined","minimumFractionDigits","scientificNotation","toExponential","maxCharsAtFullSize","scaleFactor","scaleDown","transform"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,QAAzB;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA6B;AACnD,QAAMC,OAAO,GAAI,GAAEF,KAAM,EAAT,CAAWG,OAAX,CAAmB,GAAnB,CAAhB;AACA,QAAMC,YAAY,GAAGJ,KAAK,CAACK,SAAN,CAAgBH,OAAhB,EAAyBJ,QAAQ,CAACE,KAAK,CAACM,MAAP,CAAjC,CAArB;AACA,QAAMC,qBAAqB,GAAIL,OAAO,KAAK,CAAC,CAAd,GAAmB,CAAnB,GAAuBJ,QAAQ,CAACM,YAAY,CAACE,MAAb,GAAsB,CAAvB,CAA7D;AAEA,MAAIE,cAAc,GAAGC,UAAU,CAACT,KAAD,CAAV,CAAkBU,cAAlB,CAAiCC,SAAjC,EAA4C;AAAEC,IAAAA,qBAAqB,EAAEL;AAAzB,GAA5C,CAArB;AACA,MAAIM,kBAAkB,GAAGJ,UAAU,CAACT,KAAD,CAAV,CAAkBc,aAAlB,CAAgCb,YAAY,GAAG,CAA/C,CAAzB;AAEA,QAAMc,kBAAkB,GAAG,CAA3B;AACA,QAAMC,WAAW,GAAG,aAApB;AACA,QAAMC,SAAS,GAAK,GAAET,cAAe,EAAlB,CAAoBF,MAArB,GAA+BS,kBAA/B,GAAoDC,WAApD,GAAkE,UAApF;;AAEA,MAAIR,cAAc,KAAK,KAAvB,EAA8B;AAC1BA,IAAAA,cAAc,GAAG,OAAjB;AACA;AACH;;AAED,MAAIA,cAAc,CAACF,MAAf,GAAwB,EAA5B,EAAgC;AAC5BE,IAAAA,cAAc,GAAGK,kBAAjB;AACH;;AAED,MAAIA,kBAAkB,CAACR,SAAnB,CAA6BQ,kBAAkB,CAACP,MAAnB,GAA4B,CAAzD,EAA4DO,kBAAkB,CAACP,MAA/E,MAA2F,KAA/F,EAAsG;AAAE;AACpGO,IAAAA,kBAAkB,GAAGJ,UAAU,CAACT,KAAD,CAAV,CAAkBc,aAAlB,CAAgCb,YAAY,GAAG,CAA/C,CAArB;AACAY,IAAAA,kBAAkB,GAAGA,kBAAkB,CAACR,SAAnB,CAA6B,CAA7B,EAAgCQ,kBAAkB,CAACP,MAAnB,GAA4B,CAA5D,CAArB;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAmC,IAAA,KAAK,EAAE;AAAEY,MAAAA,SAAS,EAAED;AAAb,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKT,cADL,CADJ,CADJ;AAOH,CAjCD;;AAmCA,eAAeT,iBAAf","sourcesContent":["import React from 'react';\nimport { evaluate } from 'mathjs';\n\nconst CalculatorDisplay = ({ value, maxPrecision }) => {\n    const pointAt = `${value}`.indexOf('.');\n    const decimalValue = value.substring(pointAt, evaluate(value.length));\n    const precisionWithFraction = (pointAt === -1) ? 0 : evaluate(decimalValue.length - 1);\n\n    let formattedValue = parseFloat(value).toLocaleString(undefined, { minimumFractionDigits: precisionWithFraction });\n    let scientificNotation = parseFloat(value).toExponential(maxPrecision - 4);\n\n    const maxCharsAtFullSize = 6;\n    const scaleFactor = 'scale(0.36)';\n    const scaleDown = (`${formattedValue}`.length) > maxCharsAtFullSize ? scaleFactor : 'scale(1)';\n\n    if (formattedValue === 'NaN') {\n        formattedValue = 'Error';\n        return;\n    }\n\n    if (formattedValue.length > 15) {\n        formattedValue = scientificNotation;\n    }\n\n    if (scientificNotation.substring(scientificNotation.length - 3, scientificNotation.length) === 'e+0') { // if exponent part is not needed\n        scientificNotation = parseFloat(value).toExponential(maxPrecision - 1);\n        scientificNotation = scientificNotation.substring(0, scientificNotation.length - 3);\n    }\n\n    return (\n        <div className=\"calculator-display\">\n            <div className=\"auto-scaling-text\" style={{ transform: scaleDown }}>\n                {formattedValue}\n            </div>\n        </div>\n    );\n}\n\nexport default CalculatorDisplay;"]},"metadata":{},"sourceType":"module"}