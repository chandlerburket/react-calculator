{"version":3,"sources":["components/Display.js","components/Calculator.js","components/About.js","App.js","index.js"],"names":["CalculatorDisplay","value","maxPrecision","pointAt","indexOf","decimalValue","substring","evaluate","length","precisionWithFraction","formattedValue","parseFloat","toLocaleString","undefined","minimumFractionDigits","scientificNotation","toExponential","scaleDown","className","style","transform","Calculator","useState","displayValue","setDisplayValue","operator","setOperator","waitingForOperand","setWaitingForOperand","firstOperand","setFirstOperand","clearAll","setClearAll","handleFunctionKey","newKeyValue","console","log","newDisplayValue","toPrecision","handlePlusMinusToggle","needPoint","handlePoint","handlePercentage","handleKeyPress","handleClick","e","handleNewKey","target","isDigit","includes","isOperator","handleDigit","stringToEvaluate","newOperator","handleOperator","Display","id","onClick","About","textAlign","color","marginLeft","marginRight","lineHeight","App","class","type","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAsCeA,EAnCW,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aAC1BC,EAAU,UAAGF,GAAQG,QAAQ,KAC7BC,EAAeJ,EAAMK,UAAUH,EAASI,YAASN,EAAMO,SACvDC,GAAsC,IAAbN,EAAkB,EAAII,YAASF,EAAaG,OAAS,GAEhFE,EAAiBC,WAAWV,GAAOW,oBAAeC,EAAW,CAAEC,sBAAuBL,IACtFM,EAAqBJ,WAAWV,GAAOe,cAAcd,EAAe,GAIlEe,EAAa,UAAGP,GAAiBF,OAFZ,EACP,cACgE,WAEpF,GAAuB,QAAnBE,EAcJ,OATIA,EAAeF,OAAS,KACxBE,EAAiBK,GAG0E,QAA3FA,EAAmBT,UAAUS,EAAmBP,OAAS,EAAGO,EAAmBP,UAE/EO,GADAA,EAAqBJ,WAAWV,GAAOe,cAAcd,EAAe,IAC5BI,UAAU,EAAGS,EAAmBP,OAAS,IAIjF,yBAAKU,UAAU,sBACX,yBAAKA,UAAU,oBAAoBC,MAAO,CAAEC,UAAWH,IAClDP,IAhBTA,EAAiB,SCyLVW,EArMI,WAAO,IAAD,EACmBC,mBAAS,KAD5B,mBACdC,EADc,KACAC,EADA,OAEWF,mBAAS,MAFpB,mBAEdG,EAFc,KAEJC,EAFI,OAG6BJ,oBAAS,GAHtC,mBAGdK,EAHc,KAGKC,EAHL,OAImBN,mBAAS,KAJ5B,mBAIdO,EAJc,KAIAC,EAJA,OAKWR,oBAAS,GALpB,mBAKdS,EALc,KAKJC,EALI,KAkHfC,EAAoB,SAACC,GACvB,OAAQA,GACJ,IAAK,IArBTC,QAAQC,IAAI,WAAYL,GACpBA,GACAP,EAAgB,KAChBM,EAAgB,KAChBJ,EAAY,MACZE,GAAqB,GACrBI,GAAY,KAEZR,EAAgB,KAChBQ,GAAY,IAcR,MACJ,IAAK,QAjCiB,WAC1B,IAAMK,GAAwE,EAAtD1B,WAAWY,GAAce,YAjFhC,IAmFjBd,EAAgB,GAAD,OAAIa,IACnBT,GAAqB,GACrBI,GAAY,GA6BJO,GACA,MACJ,IAAK,KA9DO,SAACL,GACjB,IAAMM,GAAgD,IAApC,UAAGjB,GAAenB,QAAQ,KAE5C,GAAIuB,EAIA,OAHAH,EAAgB,KAChBI,GAAqB,QACrBI,GAAY,GAIZQ,IACAhB,EAAgB,GAAD,OAAID,GAAJ,OAAmBW,IAClCN,GAAqB,GACrBI,GAAY,IAkDRS,CAAYP,GACZ,MACJ,IAAK,KA/CY,WACrB,IAAMG,EAAkB1B,WAAWY,GAAce,YAzEhC,IAyE4D,IAE7Ed,EAAgB,GAAD,OAAIa,IACnBT,GAAqB,GACrBI,GAAY,GA2CJU,GACA,MACJ,SAnBe,SAACR,GAEpBC,QAAQC,IAAI,gBAAiBF,GAkBrBS,CAAeT,KAKrBU,EAAc,SAACC,GACjBC,EAAa,GAAD,OAAID,EAAEE,OAAO9C,SAGvB6C,EAAe,SAACZ,GAClB,IAGMc,EAHS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAGtCC,SAASf,GAC1BgB,EAHY,CAAC,IAAK,IAAK,IAAK,IAAK,KAGVD,SAASf,GAElCc,GAzIY,SAACd,GACjB,GAAIP,EACAH,EAAgB,GAAD,OAAIU,IACnBN,GAAqB,GACrBI,GAAY,GACZG,QAAQC,IAAIb,EAAcI,EAAmBI,OAC1C,CACH,IAAMM,EAAoC,MAAjBd,EAAD,UAA4BW,GAA5B,UAAgDX,GAAhD,OAAgEW,GACxFV,EAAgB,GAAD,OAAIa,IACnBT,GAAqB,GACrBI,GAAY,IAgIZmB,CAAYjB,GAEZgB,EA9He,SAAChB,GACpB,GAAqB,MAAjBL,GAAoC,MAAZJ,GAAoBE,EAM5C,OALAH,EAAgB,GAAD,OAAID,GAAJ,OAAmBW,IAClCN,GAAqB,GACrBE,EAAgBP,GAChBG,EAAYQ,QACZF,GAAY,GAIhB,IAAMoB,EAAgB,UAAMvB,GAAN,OAAqBJ,GAArB,OAAgCF,GAGtD,IAAY,IAFA6B,EAAiBH,SAAS,KAQlC,OALAzB,EAAgB,KAChBM,EAAgB,KAChBJ,EAAY,MACZE,GAAqB,QACrBI,GAAY,GAIhBG,QAAQC,IAAIgB,GAEZ,IAAMf,EAAe,UAAM9B,YAAS6C,IAEZ,QAApBf,GACAb,EAAgB,SAGpB,IAAM6B,EAA+B,MAAhBnB,EAAuB,KAAOA,EACnDV,EAAgB,GAAD,OAAIa,IACnBT,GAAqB,GACrBE,EAAgB,GAAD,OAAIO,IACnBX,EAAY2B,GACZrB,GAAY,GA4FRsB,CAAepB,GAEfD,EAAkBC,IAM1B,OAFAC,QAAQC,IAAIb,GAGR,yBAAKL,UAAU,cACX,kBAACqC,EAAD,CAAStD,MAAOsB,EAAcrB,aAzJjB,KA2Jb,yBAAKgB,UAAU,qBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,iBACX,4BAAQsC,GAAG,YAAYvD,MAAM,IAAIiB,UAAU,2BAA2BuC,QAASb,GAAcb,EAAW,KAAO,KAC/G,4BAAQyB,GAAG,WAAWvD,MAAM,OAAIiB,UAAU,0BAA0BuC,QAASb,GAA7E,QACA,4BAAQY,GAAG,cAAcvD,MAAM,IAAIiB,UAAU,6BAA6BuC,QAASb,GAAnF,MAGJ,yBAAK1B,UAAU,cACX,4BAAQsC,GAAG,QAAQvD,MAAM,IAAIiB,UAAU,uBAAuBuC,QAASb,GAAvE,KACA,4BAAQY,GAAG,UAAUvD,MAAM,IAAIiB,UAAU,yBAAyBuC,QAASb,GAA3E,QACA,4BAAQY,GAAG,QAAQvD,MAAM,IAAIiB,UAAU,uBAAuBuC,QAASb,GAAvE,KACA,4BAAQY,GAAG,QAAQvD,MAAM,IAAIiB,UAAU,uBAAuBuC,QAASb,GAAvE,KACA,4BAAQY,GAAG,QAAQvD,MAAM,IAAIiB,UAAU,uBAAuBuC,QAASb,GAAvE,KACA,4BAAQY,GAAG,QAAQvD,MAAM,IAAIiB,UAAU,uBAAuBuC,QAASb,GAAvE,KACA,4BAAQY,GAAG,QAAQvD,MAAM,IAAIiB,UAAU,uBAAuBuC,QAASb,GAAvE,KACA,4BAAQY,GAAG,QAAQvD,MAAM,IAAIiB,UAAU,uBAAuBuC,QAASb,GAAvE,KACA,4BAAQY,GAAG,QAAQvD,MAAM,IAAIiB,UAAU,uBAAuBuC,QAASb,GAAvE,KACA,4BAAQY,GAAG,QAAQvD,MAAM,IAAIiB,UAAU,uBAAuBuC,QAASb,GAAvE,KACA,4BAAQY,GAAG,QAAQvD,MAAM,IAAIiB,UAAU,uBAAuBuC,QAASb,GAAvE,OAIR,yBAAK1B,UAAU,iBACX,4BAAQsC,GAAG,aAAavD,MAAM,IAAIiB,UAAU,qCAAqCuC,QAASb,GAA1F,QACA,4BAAQY,GAAG,eAAevD,MAAM,IAAIiB,UAAU,uCAAuCuC,QAASb,GAA9F,QACA,4BAAQY,GAAG,eAAevD,MAAM,IAAIiB,UAAU,uCAAuCuC,QAASb,GAA9F,UACA,4BAAQY,GAAG,UAAUvD,MAAM,IAAIiB,UAAU,kCAAkCuC,QAASb,GAApF,KACA,4BAAQY,GAAG,aAAavD,MAAM,IAAIiB,UAAU,qCAAqCuC,QAASb,GAA1F,S,QCjKLc,EA9BD,WACV,OACI,6BACI,qCAGA,6BACI,sEACA,wBAAIvC,MAAO,CAAEwC,UAAW,SACpB,wBAAIzC,UAAU,YACV,yCADJ,SACgC,yCADhC,QAC2D,oDAD3D,QACiG,4DAEjG,wBAAIA,UAAU,YACV,gDADJ,iBAC+C,uDAD/C,KAGA,wBAAIA,UAAU,YACV,2CADJ,OACgC,wDADhC,mBACqF,4BAAQC,MAAO,CAAEyC,MAAO,QAAxB,aADrF,IACyI,wCADzI,oBAIJ,uEACA,uBAAGzC,MAAO,CAAEwC,UAAW,OAAQE,WAAY,OAAQC,YAAa,OAAQC,WAAY,SAApF,uBACwB,gDADxB,iDACiG,2DADjG,oEAE+C,0DAF/C,mCAEoH,6DAFpH,uFAG6C,4CAH7C,gC,OC2BDC,EArCH,WAEV,OACE,kBAAC,IAAD,KACE,yBAAK9C,UAAU,OACb,yBAAKsC,GAAG,WACN,yBAAKA,GAAG,sBACV,yBAAKS,MAAM,cACX,2BAAOA,MAAM,kBAAkBC,KAAK,aACpC,yBAAKD,MAAM,aACT,+BAEF,yBAAKA,MAAM,QACT,6BAGE,yBAAKA,MAAM,iBACT,wBAAIA,MAAM,UAAV,mBACd,0DAA+B,wtBAQnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,IAAIC,UAAWhD,IACjC,kBAAC,IAAD,CAAO8C,OAAK,EAACC,KAAK,SAASC,UAAWX,UCpCpDY,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.c30a90ee.chunk.js","sourcesContent":["import React from 'react';\nimport { evaluate } from 'mathjs';\n\nconst CalculatorDisplay = ({ value, maxPrecision }) => {\n    const pointAt = `${value}`.indexOf('.');\n    const decimalValue = value.substring(pointAt, evaluate(value.length));\n    const precisionWithFraction = (pointAt === -1) ? 0 : evaluate(decimalValue.length - 1);\n\n    let formattedValue = parseFloat(value).toLocaleString(undefined, { minimumFractionDigits: precisionWithFraction });\n    let scientificNotation = parseFloat(value).toExponential(maxPrecision - 4);\n\n    const maxCharsAtFullSize = 6;\n    const scaleFactor = 'scale(0.36)';\n    const scaleDown = (`${formattedValue}`.length) > maxCharsAtFullSize ? scaleFactor : 'scale(1)';\n\n    if (formattedValue === 'NaN') {\n        formattedValue = 'Error';\n        return;\n    }\n\n    if (formattedValue.length > 15) {\n        formattedValue = scientificNotation;\n    }\n\n    if (scientificNotation.substring(scientificNotation.length - 3, scientificNotation.length) === 'e+0') { // if exponent part is not needed\n        scientificNotation = parseFloat(value).toExponential(maxPrecision - 1);\n        scientificNotation = scientificNotation.substring(0, scientificNotation.length - 3);\n    }\n\n    return (\n        <div className=\"calculator-display\">\n            <div className=\"auto-scaling-text\" style={{ transform: scaleDown }}>\n                {formattedValue}\n            </div>\n        </div>\n    );\n}\n\nexport default CalculatorDisplay;","import React, { useState } from 'react';\nimport { evaluate } from 'mathjs';\nimport Display from './Display';\n\nconst Calculator = () => {\n    const [displayValue, setDisplayValue] = useState('0');\n    const [operator, setOperator] = useState(null);\n    const [waitingForOperand, setWaitingForOperand] = useState(false);\n    const [firstOperand, setFirstOperand] = useState('0');\n    const [clearAll, setClearAll] = useState(true);\n    const maxPrecision = 16;\n\n    const handleDigit = (newKeyValue) => {\n        if (waitingForOperand) {\n            setDisplayValue(`${newKeyValue}`);\n            setWaitingForOperand(false);\n            setClearAll(false);\n            console.log(displayValue, waitingForOperand, clearAll)\n        } else {\n            const newDisplayValue = (displayValue === '0') ? `${newKeyValue}` : `${(displayValue)}${newKeyValue}`; //no leading zero\n            setDisplayValue(`${newDisplayValue}`);\n            setWaitingForOperand(false);\n            setClearAll(false);\n        }\n    }\n\n    const handleOperator = (newKeyValue) => {\n        if (firstOperand === '0' || operator == null || waitingForOperand) {\n            setDisplayValue(`${displayValue}${newKeyValue}`)\n            setWaitingForOperand(true);\n            setFirstOperand(displayValue);\n            setOperator(newKeyValue);\n            setClearAll(false);\n            return;\n        };\n\n        const stringToEvaluate = `${firstOperand}${operator}${displayValue}`;\n        const res = stringToEvaluate.includes('=');\n\n        if (res === true) {\n            setDisplayValue('0');\n            setFirstOperand('0');\n            setOperator(null);\n            setWaitingForOperand(false);\n            setClearAll(true);\n            return;\n        };\n\n        console.log(stringToEvaluate)\n\n        const newDisplayValue = `${evaluate(stringToEvaluate)}`;\n\n        if (newDisplayValue === \"NaN\") {\n            setDisplayValue('Error');\n        };\n\n        const newOperator = (newKeyValue === \"=\") ? null : newKeyValue;\n        setDisplayValue(`${newDisplayValue}`);\n        setWaitingForOperand(true);\n        setFirstOperand(`${newDisplayValue}`);\n        setOperator(newOperator);\n        setClearAll(false);\n    };\n\n    const handlePoint = (newKeyValue) => {\n        const needPoint = `${displayValue}`.indexOf('.') === -1 ? true : false;\n\n        if (waitingForOperand) {\n            setDisplayValue('0');\n            setWaitingForOperand(false);\n            setClearAll(false);\n            return;\n        };\n\n        if (needPoint) {\n            setDisplayValue(`${displayValue}${newKeyValue}`);\n            setWaitingForOperand(false);\n            setClearAll(false);\n        };\n    }\n\n    // TODO: Fix Percentage.\n    const handlePercentage = () => {\n        const newDisplayValue = parseFloat(displayValue).toPrecision(maxPrecision) / 100;\n\n        setDisplayValue(`${newDisplayValue}`);\n        setWaitingForOperand(false);\n        setClearAll(false);\n    }\n\n    const handlePlusMinusToggle = () => {\n        const newDisplayValue = parseFloat(displayValue).toPrecision(maxPrecision) * -1\n\n        setDisplayValue(`${newDisplayValue}`);\n        setWaitingForOperand(false);\n        setClearAll(false);\n    }\n\n    const handleClear = () => {\n        console.log('clearAll', clearAll);\n        if (clearAll) {\n            setDisplayValue('0');\n            setFirstOperand('0');\n            setOperator(null);\n            setWaitingForOperand(false);\n            setClearAll(true);\n        } else {\n            setDisplayValue('0');\n            setClearAll(true);\n        }\n    }\n\n\n    const handleKeyPress = (newKeyValue) => {\n        /* Don't do anything, just write to the console. */\n        console.log('Input Value: ', newKeyValue);\n    }\n\n    const handleFunctionKey = (newKeyValue) => {\n        switch (newKeyValue) {\n            case \"C\":\n                handleClear();\n                break;\n            case \"±\":\n                handlePlusMinusToggle();\n                break;\n            case \".\":\n                handlePoint(newKeyValue);\n                break;\n            case \"%\":\n                handlePercentage();\n                break;\n            default:\n                handleKeyPress(newKeyValue);\n        }\n    }\n\n\n    const handleClick = (e) => {\n        handleNewKey(`${e.target.value}`);\n    }\n\n    const handleNewKey = (newKeyValue) => {\n        const digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n        const operators = ['/', '*', '-', '+', '='];\n\n        const isDigit = digits.includes(newKeyValue);\n        const isOperator = operators.includes(newKeyValue);\n\n        if (isDigit) {\n            handleDigit(newKeyValue);\n        }\n        if (isOperator) {\n            handleOperator(newKeyValue);\n        } else {\n            handleFunctionKey(newKeyValue);\n        }\n    }\n\n    console.log(displayValue)\n\n    return (\n        <div className=\"calculator\">\n            <Display value={displayValue} maxPrecision={maxPrecision} />\n\n            <div className=\"calculator-keypad\">\n                <div className=\"input-keys\">\n                    <div className=\"function-keys\">\n                        <button id=\"key-clear\" value=\"C\" className=\"calculator-key key-clear\" onClick={handleClick}>{clearAll ? 'AC' : 'C'}</button>\n                        <button id=\"key-sign\" value=\"±\" className=\"calculator-key key-sign\" onClick={handleClick}>&plusmn;</button>\n                        <button id=\"key-percent\" value=\"%\" className=\"calculator-key key-percent\" onClick={handleClick}>%</button>\n                    </div>\n\n                    <div className=\"digit-keys\">\n                        <button id=\"key-0\" value=\"0\" className=\"calculator-key key-0\" onClick={handleClick}>0</button>\n                        <button id=\"key-dot\" value=\".\" className=\"calculator-key key-dot\" onClick={handleClick}>&middot;</button>\n                        <button id=\"key-1\" value=\"1\" className=\"calculator-key key-1\" onClick={handleClick}>1</button>\n                        <button id=\"key-2\" value=\"2\" className=\"calculator-key key-2\" onClick={handleClick}>2</button>\n                        <button id=\"key-3\" value=\"3\" className=\"calculator-key key-3\" onClick={handleClick}>3</button>\n                        <button id=\"key-4\" value=\"4\" className=\"calculator-key key-4\" onClick={handleClick}>4</button>\n                        <button id=\"key-5\" value=\"5\" className=\"calculator-key key-5\" onClick={handleClick}>5</button>\n                        <button id=\"key-6\" value=\"6\" className=\"calculator-key key-6\" onClick={handleClick}>6</button>\n                        <button id=\"key-7\" value=\"7\" className=\"calculator-key key-7\" onClick={handleClick}>7</button>\n                        <button id=\"key-8\" value=\"8\" className=\"calculator-key key-8\" onClick={handleClick}>8</button>\n                        <button id=\"key-9\" value=\"9\" className=\"calculator-key key-9\" onClick={handleClick}>9</button>\n                    </div>\n                </div>\n\n                <div className=\"operator-keys\">\n                    <button id=\"key-divide\" value=\"/\" className=\"calculator-key calc-key key-divide\" onClick={handleClick}>&divide;</button>\n                    <button id=\"key-multiply\" value=\"*\" className=\"calculator-key calc-key key-multiply\" onClick={handleClick}>&times;</button>\n                    <button id=\"key-subtract\" value=\"-\" className=\"calculator-key calc-key key-subtract\" onClick={handleClick}>&ndash;</button>\n                    <button id=\"key-add\" value=\"+\" className=\"calculator-key calc-key key-add\" onClick={handleClick}>+</button>\n                    <button id=\"key-equals\" value=\"=\" className=\"calculator-key calc-key key-equals\" onClick={handleClick}>=</button>\n                </div>\n            </div>\n        </div>\n    )\n\n}\n\nexport default Calculator;","import React from 'react';\n\nconst About = () => {\n    return (\n        <div>\n            <h1>\n                About\n            </h1>\n            <div>\n                <h3>🔨 Built Using: 🔨</h3>\n                <ul style={{ textAlign: 'left', }}>\n                    <li className=\"li-space\">\n                        <strong>React</strong> with <strong>Hooks</strong> for <strong>state management</strong> and <strong>dynamic user interface.</strong>\n                    </li>\n                    <li className=\"li-space\">\n                        <strong>React Router</strong> for painless <strong>client-side routing</strong>.\n                    </li>\n                    <li className=\"li-space\">\n                        <strong>Math.js</strong> to <strong>evaluate expressions</strong> instead of the <strong style={{ color: 'red' }}>dangerous</strong> <code>eval()</code> in JavaScript.\n                    </li>\n                </ul>\n                <h3>💻 Code Summary: 💻</h3>\n                <p style={{ textAlign: 'left', marginLeft: '50px', marginRight: '50px', lineHeight: '20px' }}>\n                    On each click event <code>handleClick(e)</code> will pass the value of the button clicked to <code>handleNewKey(newKeyValue)</code> to handle the value.\n                    There is a function to handle digits (0-9) <code>handleDigit(newKeyValue)</code>, operators (+, -, *, /, and =) <code>handleOperator(newKeyValue)</code>, and the other buttons on the calculator. \n                    If the string is a valid expression then <code>Display.js</code> will format accordingly.\n                </p>\n            </div>\n        </div>\n    )\n};\n\nexport default About;","import React from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator';\nimport Navbar from './components/Navbar';\nimport About from './components/About';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  HashRouter\n} from 'react-router-dom';\n\nconst App = () => {\n\n  return (\n    <HashRouter>\n      <div className=\"App\">\n        <div id=\"wrapper\">\n          <div id=\"calculator-wrapper\">\n        <div class=\"outer-menu\">\n        <input class=\"checkbox-toggle\" type=\"checkbox\" />\n        <div class=\"hamburger\">\n          <div></div>\n        </div>\n        <div class=\"menu\">\n          <div>\n            \n         \n            <div class=\"Menucontainer\">\n              <h1 class=\"porter\">Chandler Burket</h1>\n<div>                          <p>I am a highly motivated programmer and hard worker aspiring to build a career in software development. I am young and do lack experience but I love working with technology in my free time. I am very passionate about working with tech because of the many ways it has and can be applied. That is also why my main focus is on software development as it allows you to create anything and it allows computers to do all the things that make them so wonderful. I like working with hardware as well and believe it's important to have a fundamental understanding of it but software development is my main focus. I am willing to put in the outside hours learning and studying to prove I can be an asset</p>\n</div>\n            </div>\n\n          </div>\n\n        </div>\n        </div>\n            <Switch>\n              <Route exact path=\"/\" component={Calculator} />\n              <Route exact path=\"/about\" component={About} />\n            </Switch>\n          </div>\n        </div>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}